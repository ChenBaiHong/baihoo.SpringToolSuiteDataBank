server:
  servlet:
    context-path: /msmovie
  port: 8902
logging:
  pattern:
    console: '%d - %msg%n'
    level:
      com.baihoomuch.cloud: info
  path: G:/IntelliJ_IDEALog/IDEA_Microservice/microservices-pring-cloud
  file: G:/IntelliJ_IDEALog/IDEA_Microservice/microservices-pring-cloud/microserviceConsumerMovieRibbon3.log
# eureka.client.registerWithEureka ：表示是否将自己注册到Eureka Server，默认为true。由于当前这个应用就是Eureka Server，故而设为false
# eureka.client.fetchRegistry ：表示是否从Eureka Server获取注册信息，默认为true。因为这是一个单点的Eureka Server，不需要同步其他的Eureka Server节点的数据，故而设为false。
# eureka.client.serviceUrl.defaultZone ：设置与Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址。默认是http://localhost:8761/eureka ；多个地址可使用 , 分隔。
spring:
  application:
    name: microservice-consumer-movie-ribbon-without-eureka
eureka:
  client:
    service-url:
      defaultZone: http://admin:admin@localhost:8761/eureka/
  instance:
    #默認是 false，是否啓動IP訪問
    prefer-ip-address: true
    # 改配置相當與 IP地址:我的應用名稱:端口
    instance-id: ${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${server.port}}
#将ribbon.eureka.Enable属性设置为false显式禁止在Ribbon中使用Eureka。
ribbon:
  eureka:
    enabled: false
#Eureka 是一种抽象远程服务器发现的方便方法，这样您就不必在客户端中硬编码它们的URL，如果不想使用Eureka集成Ribbon 和 Feign 工作。   
#假设您已经为“商店（microservice-provider-user）”声明了@RibbonClient，而Eureka没有使用(甚至在类路径上也没有)。
#Ribbon客户端默认为已配置的服务器列表。按以下方式提供配置
microservice-provider-user: 
  ribbon:
    listOfServers: localhost:7905 #因此只会访问7905的节点