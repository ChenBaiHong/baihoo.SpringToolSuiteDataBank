package com.baihoo.blog.controller;

import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.baihoo.blog.domain.Authority;
import com.baihoo.blog.domain.User;
import com.baihoo.blog.service.AuthorityService;
import com.baihoo.blog.service.UserService;
import com.baihoo.blog.vo.Response;

/**
 * 用户控制层
 * 
 * @author Administrator
 *
 */
@RestController
@RequestMapping("/users")
@PreAuthorize("hasAuthority('ROLE_ADMIN')")  // 指定角色权限才能操作方法
public class UserController {

	@Autowired
	@Qualifier("userService")
	private UserService userService;
	@Autowired
	@Qualifier("authorityService")
	private AuthorityService authorityService;
	/**
	 * 查询所用用户
	 * 
	 * @param model
	 * @return
	 * @throws Exception 
	 */
	//@GetMapping("/list")
	@GetMapping
	public ModelAndView list(@RequestParam(value = "async", required = false) boolean async,
			@RequestParam(value = "pageIndex", required = false, defaultValue = "0") Integer pageIndex,
			@RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize,
			@RequestParam(value = "name", required = false, defaultValue = "") String name, Model model) throws Exception {
		Pageable pageable = PageRequest.of(pageIndex, pageSize);
		Page<User>  page = userService.findByNameLike(name, pageable);
		
		model.addAttribute("userList", page.getContent());
		model.addAttribute("page", page);
		//“ users/list :: #mainContainerRepleace ” ， ===/users/list.html  [ <div id="mainContainerRepleace" class="row"> ]
		return new ModelAndView(async==true?"users/list :: #mainContainerRepleace":"users/list", "userModel", model);
	}

	/**
	 * 获取创建表单页面
	 * 
	 * @param model
	 * @return
	 */
	@GetMapping("/add")
	public ModelAndView createForm(Model model) {
		model.addAttribute("user", new User(null , null , null , null));
		model.addAttribute("title", "创建用户");
		return new ModelAndView("users/add", "userModel", model);
	}
	/**
	 * Ajax调用该方法<br>
	 * 			新建用户
	 * @param user
	 * @param authorityId
	 * @return
	 */
	//@PostMapping("/create")
	@PostMapping
	public ResponseEntity<Response> create(User user , Long authorityId) throws Exception{
		//新建装载授权对象的集合
		List<Authority> authorities = new ArrayList<Authority>();
		authorities.add(authorityService.findById(authorityId));
		//用户给予授权，权限
		user.setAuthorities(authorities);
		
		if(user.getId() ==null) {//若用户id是空，密码加密，保存用户
			user.setPasswordEncoder(user.getPassword());
		}else {//若用户id不是空，更新用户
			//判断密码是否做变更
			User originalUser = userService.findById(user.getId());
			PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
			String rawPassword = passwordEncoder.encode(user.getPassword());
			boolean isMatch = passwordEncoder.matches(rawPassword, originalUser.getPassword());
			if(!isMatch) {
				user.setPasswordEncoder(user.getPassword());
			}else {
				user.setPassword(user.getPassword());
			}
		}
		userService.saveOrUpdate(user);
		return ResponseEntity.ok().body(new Response(true ,"处理成功" , user));
	}
	

	/**
	 * 根据id刪除用戶
	 * 
	 * @param id
	 * @param model
	 * @return
	 * @throws Exception 
	 */
	@DeleteMapping("/{id}")
	public ResponseEntity<Response> deleteUser(@PathVariable("id") Long id, Model model) throws Exception {
		userService.deleteById(id);

		return ResponseEntity.ok().body(new Response(true ,"处理成功" ));
	}
	
	/**
	 * 获取修改用户的界面，及数据
	 * @param user
	 * @return
	 * @throws Exception 
	 */
	@GetMapping(value = "edit/{id}")
	public ModelAndView modifyForm(@PathVariable("id") Long id, Model model) throws Exception {
		User user = userService.findById(id);
		model.addAttribute("user", user);
		return new ModelAndView("users/edit", "userModel", model);
	}
}
