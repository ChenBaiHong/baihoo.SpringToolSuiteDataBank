package com.baihoo.blog.service.impl;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.validation.annotation.Validated;

import com.baihoo.blog.domain.User;
import com.baihoo.blog.repository.UserRepository;
import com.baihoo.blog.service.UserService;

/**
 * 用戶服務層接口實現
 * @author Administrator
 *
 */
@Service("userService")
public class UserServiceImpl implements UserService{

	@Autowired
	@Qualifier("userRepository")
	private UserRepository userRepository;
	
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		User user = userRepository.findByUsername(username);
		if(user == null ) {
			throw new UsernameNotFoundException("用户名不存在");
		}
		return user;
	}
	
	/**
	 *	用户账号，用户登录时的唯一标识,不可重複檢查
	 */
	@Override
	public boolean isUsernameUnique(String username)  throws Exception {
		if(userRepository.findByUsername(username)!=null) {
			return false;
		}else {
			return true;
		}
	}
	/**
	 * 查詢所有用戶
	 */
	@Override
	public List<User> findAll() {
	
		return userRepository.findAll();
	}
	/**
	 * 通過用戶姓名，分頁查詢
	 */
	@Override
	public Page<User> findByNameLike(String name, Pageable page)  throws Exception {
		// 模糊查询
		name  = name==null?"":name; //去空處理
		name = "'%" + name + "%'";
		return userRepository.findByNameLike(name, page);
	}
	/**
	 * 通過用戶名稱查詢用戶
	 */
	@Override
	public User findByUsername(String username)  throws Exception{
	
		return userRepository.findByUsername(username);
	}
	/**
	 * 通過id查詢用戶
	 */
	@Override
	public User findById(Long id)  throws Exception {
		Optional<User> optUser = userRepository.findById(id);
		return optUser.get();
	}
	/**
	 * 更新或者保存用戶
	 */
	@Override
	public User saveOrUpdate(User user)  throws Exception {
		
		return userRepository.save(user);
	}
	/**
	 * 通過id刪除用戶
	 */
	@Override
	public void deleteById(Long id)  throws Exception{
		userRepository.deleteById(id);
	}
	/**
	 * 刪除用戶
	 */
	@Override
	public void deleteUser(User user)  throws Exception{
	
		userRepository.delete(user);
	}
	/**
	 * 注冊用戶
	 */
	@Override
	public User registerUser(User user)  throws Exception{
		
		return userRepository.save(user);
	}
}
