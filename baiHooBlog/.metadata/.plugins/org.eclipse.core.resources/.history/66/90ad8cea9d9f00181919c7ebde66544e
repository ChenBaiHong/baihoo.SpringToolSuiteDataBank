package com.baihoo.blog.validator.UserValidator;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

import com.baihoo.blog.anno.UsernameUnique;
import com.baihoo.blog.exception.CustomException;

/**
 * 控制是否对字段进行唯一校验
 * @author Administrator
 *
 */
public class UniqueValidateControl<T> {
	/**
	 * @param bean 实体表
	 * @param uniquefield  实体表唯一约束字段
	 * @param isvalidate 是否唯一约束， 默认是true,要唯一约束
	 */
	private T bean ; 
	private String uniquefield;
	/**
	 * 构造函数私有化
	 */
	private UniqueValidateControl() {
		
	}
	/**
	 * 
	 * @param bean
	 * @param uniquefield
	 * @param isvalidate
	 */
	public UniqueValidateControl(T bean, String uniquefield) {
		super();
		this.bean = bean;
		this.uniquefield = uniquefield;
	}
	public void setIsvalidate(boolean isvalidate) throws CustomException {
		try {
			Field field = bean.getClass().getDeclaredField(this.uniquefield);
			field.setAccessible(true);
			UsernameUnique anno = field.getAnnotation(UsernameUnique.class);
			if(anno == null ) {
				return ;
			}else {
				//注解对象方法值
				Method annoMethod = anno.getClass().getDeclaredMethod("isValidate", new Class[]{});
				annoMethod.setAccessible(true);
				annoMethod.invoke(anno,isvalidate);
			}
		}catch(Exception e) {
			throw new CustomException("唯一约束控制，传参有误！！！");
		}
	}
}
